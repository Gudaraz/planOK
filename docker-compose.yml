services:
  db:
    image: postgres:13-alpine
    platform: linux/amd64
    container_name: task_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    # --- NUEVO: Healthcheck ---
    # Esto le dice a Docker cómo verificar si la base de datos está realmente lista.
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - task-network

  backend:
    container_name: task_backend
    build: ./backend
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    # --- MODIFICADO: depends_on con condición ---
    # Ahora, el backend no solo espera a que 'db' se inicie, sino a que esté 'saludable'.
    depends_on:
      db:
        condition: service_healthy
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    networks:
      - task-network

  frontend:
    container_name: task_frontend
    build: ./frontend
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - task-network

# Definimos la red personalizada que usarán todos los servicios.
networks:
  task-network:
    driver: bridge

volumes:
  postgres_data:
